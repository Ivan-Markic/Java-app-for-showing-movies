/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.parsers.rss.MovieParser;
import hr.algebra.utils.MessageUtils;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author ivanm
 */
public class UploadMoviesPanel extends javax.swing.JPanel {

    private static final String XML_FILE = "assets/favouriteMovies.xml";
    private static final String TXT_FILE = "assets/movies.txt";
    private DefaultListModel<Movie> movieModel;
    private Repository repository;
    private List<Movie> movies;

    
    /**
     * Creates new form UploadMoviesPanel
     */
    public UploadMoviesPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();
        btnDeleteMovies = new javax.swing.JButton();
        btnUploadMovies = new javax.swing.JButton();

        setName("Upload Movies"); // NOI18N

        jScrollPane1.setViewportView(lsMovies);

        btnDeleteMovies.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteMovies.setText("Delete Movies");
        btnDeleteMovies.setActionCommand("Upload articles");
        btnDeleteMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMoviesActionPerformed(evt);
            }
        });

        btnUploadMovies.setText("Upload Movies");
        btnUploadMovies.setActionCommand("Upload articles");
        btnUploadMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadMoviesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1240, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnUploadMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUploadMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMoviesActionPerformed

        if (MessageUtils.showConfirmDialog(
                "Delete movies",
                "Do you really want to delete movies?") == JOptionPane.YES_OPTION) {
            enableButtons(false);
            new Thread(() -> {
                try {
                    Files.deleteIfExists(Paths.get(TXT_FILE));
                    Files.deleteIfExists(Paths.get(XML_FILE));
                    for(Movie movie : movies){
                        if (movie.getPicturePath() != null) {
                            Files.deleteIfExists(Paths.get(movie.getPicturePath()));
                        }
                    }
                    repository.deleteMovies();
                    SwingUtilities.invokeLater(new Runnable(){
                    public void run(){
                        try {
                            loadModel();
                            enableButtons(true);
                        } catch (Exception ex) {
                            Logger.getLogger(UploadMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                            MessageUtils.showErrorMessage("Error", "Unable to delete movies");
                        }
                    }});

                } catch (Exception ex) {
                    Logger.getLogger(UploadMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    MessageUtils.showErrorMessage("Error", "Unable to delete movies!");
                }
            }).start();
        }
    }//GEN-LAST:event_btnDeleteMoviesActionPerformed

    private void btnUploadMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadMoviesActionPerformed

        enableButtons(false);
        
        new Thread(() -> {
            try {
                movies = MovieParser.parse();
                repository.addMovies(movies);
                SwingUtilities.invokeLater(new Runnable(){
                    public void run(){
                        try {
                            loadModel();
                            enableButtons(true);
                        } catch (Exception ex) {
                            Logger.getLogger(UploadMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                            MessageUtils.showErrorMessage("Error", "Unable to load movies");
                        }
                    }
                });
            } catch (Exception ex) {
                Logger.getLogger(UploadMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to get movies");
            }
        }).start();
    }//GEN-LAST:event_btnUploadMoviesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteMovies;
    private javax.swing.JButton btnUploadMovies;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Movie> lsMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            repository = RepositoryFactory.getRepository();
            movies = new ArrayList<>();
            movieModel = new DefaultListModel<>();
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(UploadMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Cannot load form");
            System.exit(1);
        }
    }

    private void loadModel() throws Exception {
        movies = repository.selectMovies();
        movieModel.clear();
        movies.forEach(movieModel::addElement);
        lsMovies.setModel(movieModel);
    }

    private void enableButtons(boolean mode) {
        btnUploadMovies.setEnabled(mode);
        btnDeleteMovies.setEnabled(mode);
    }
}
